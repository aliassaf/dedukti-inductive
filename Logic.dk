(; Martin-Lof type theory ;)

#NAME Logic.

U : Type.
T : U -> Type.

(; False ;)

false : U.

empty := false.

(; True ;)

true : U.

tt : T true.

unit := true.

(; Conjunction ;)

and : a : U -> b : U -> U.

pair : a : U -> b : U -> T a -> T b -> T (and a b).

proj1 : a : U -> b : U -> T (and a b) -> T a.
proj2 : a : U -> b : U -> T (and a b) -> T b.

[ a : U, b : U, x : T a, y : T b ] proj1 a b (pair a b x y) --> x.
[ a : U, b : U, x : T a, y : T b ] proj2 a b (pair a b x y) --> y.

(; Disjunction ;)

or : a : U -> b : U -> U.

inj1 : a : U -> b : U -> T a -> T (or a b).
inj2 : a : U -> b : U -> T b -> T (or a b).

case : a : U -> b : U -> c : (T (or a b) -> U) ->
  (x : T a -> T (c (inj1 a b x))) -> (y : T b -> T (c (inj2 a b y))) -> z : T (or a b) -> T (c z).

[ a : U, b : U, c : (T (or a b) -> U),
  f : (x : T a -> T (c (inj1 a b x))), g : (y : T b -> T (c (inj2 a b y))), x : T a
] case a b c f g (inj1 a b x) --> f x.

[ a : U, b : U, c : (T (or a b) -> U),
  f : (x : T a -> T (c (inj1 a b x))), g : (y : T b -> T (c (inj2 a b y))), y : T b
] case a b c f g (inj2 a b y) --> g y.

(; Universal quantification ;)

forall : a : U -> b : (T a -> U) -> U. 

(; TODO ;)

(; Existential quantification ;)

exists : a : U -> b : (T a -> U) -> U.

(; TODO ;)

